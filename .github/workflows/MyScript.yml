name: MyScript
on: 
  push: 
    branches:  [feature/paclet-cicd-updates]
jobs: 
  Before: 
    name: Before
    runs-on: ubuntu-latest
    container: 
      image: wolframresearch/wolframengine:latest
      options: --user root
    env: 
      WOLFRAM_SYSTEM_ID: Linux-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - name: Before
      run: wolframscript Scripts/Before.wls
  Run-Linux: 
    name: Run-Linux
    runs-on: ubuntu-latest
    container: 
      image: wolframresearch/wolframengine:latest
      options: --user root
    env: 
      WOLFRAM_SYSTEM_ID: Linux-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - name: Run
      run: wolframscript Scripts/Run.wls
    needs:  [Before]
  Run-MacOSX: 
    name: Run-MacOSX
    runs-on: macos-latest
    env: 
      WOLFRAM_SYSTEM_ID: MacOSX-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-A
      WOLFRAMENGINE_INSTALLATION_DIRECTORY: "/Applications/Wolfram Engine.app"
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - name: RestoreCachedWolframEngine
      id: cache-restore-step
      uses: actions/cache@v2
      with: 
        path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
        key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}
    - name: InstallWolframEngine
      if: steps.cache-restore-step.outputs.cache-hit != 'true'
      run: |
        echo 'Installing Wolfram Engine...'
        brew install --cask wolfram-engine
        echo 'Installed Wolfram Engine.'
    - name: Run
      run: |
        export PATH="${{ env.WOLFRAMENGINE_EXECUTABLES_DIRECTORY }}:$PATH"
        wolframscript -debug -verbose -script Scripts/Run.wls
      env: 
        WOLFRAMENGINE_EXECUTABLES_DIRECTORY: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/Resources/Wolfram Player.app/Contents/MacOS"
        WOLFRAMSCRIPT_KERNELPATH: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/MacOS/WolframKernel"
    needs:  [Before]
  Run-Windows: 
    name: Run-Windows
    runs-on: windows-latest
    env: 
      WOLFRAM_SYSTEM_ID: Windows-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
      WOLFRAMENGINE_INSTALL_MSI_DOWNLOAD_URL: https://files.wolframcdn.com/packages/winget/13.0.0.0/WolframEngine_13.0.0_WIN.msi
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-A
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - name: RestoreCachedWolframEngine
      id: cache-restore-step
      uses: actions/cache@v2
      env: 
        WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\WolframEngine'
      with: 
        path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
        key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}
    - name: InstallWolframEngine
      if: steps.cache-restore-step.outputs.cache-hit != 'true'
      env: 
        WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\WolframEngine'
        WOLFRAMENGINE_INSTALL_MSI_PATH: '${{ runner.temp }}\WolframEngine-Install.msi'
        WOLFRAMENGINE_INSTALL_LOG_PATH: '${{ runner.temp }}\WolframEngine-Install.log'
      run: |
        echo 'Downloading Wolfram Engine installer...'
        $msiFile = '${{ env.WOLFRAMENGINE_INSTALL_MSI_PATH }}'
        $logFile = '${{ env.WOLFRAMENGINE_INSTALL_LOG_PATH }}'
        Import-Module BitsTransfer
        Start-BitsTransfer '${{ env.WOLFRAMENGINE_INSTALL_MSI_DOWNLOAD_URL }}' $msiFile
        echo 'Downloaded Wolfram Engine installer.'
        $DataStamp = get-date -Format yyyyMMddTHHmmss
        $MSIArguments = @(
            "/i"
            ('"{0}"' -f $msiFile)
            'INSTALLLOCATION="${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}"'
            "/qn"
            "/norestart"
            "/L*v"
            $logFile
        )
        echo 'Installing Wolfram Engine...'
        Start-Process "msiexec.exe" -ArgumentList $MSIArguments -Wait -NoNewWindow
        echo 'Installed Wolfram Engine.'
        Set-Alias -Name wolframscript -Value wolfram
    - name: Run
      run: |
        $env:Path += ';${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}\'
        wolfram -script Scripts/Run.wls
      env: 
        WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\WolframEngine'
        WOLFRAMINIT: "-pwfile !cloudlm.wolfram.com -entitlement ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}"
    needs:  [Before]
  After: 
    name: After
    runs-on: ubuntu-latest
    container: 
      image: wolframresearch/wolframengine:latest
      options: --user root
    env: 
      WOLFRAM_SYSTEM_ID: Linux-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - name: After
      run: wolframscript Scripts/After.wls
    needs:  [Run-Linux, Run-MacOSX, Run-Windows]